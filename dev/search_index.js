var documenterSearchIndex = {"docs":
[{"location":"index.html#RemoteS","page":"Index","title":"RemoteS","text":"","category":"section"},{"location":"index.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [RemoteS]\nOrder   = [:function, :type, :module]","category":"page"},{"location":"index.html#Functions","page":"Index","title":"Functions","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Modules = [RemoteS]\nOrder   = [:function, :type, :module]","category":"page"},{"location":"index.html#RemoteS.bright_T-Tuple{String}","page":"Index","title":"RemoteS.bright_T","text":"R = bright_T(fname::String)\n\nReturns a GMTgrid with the brigthness temperature of Landasat8 termal band (10 or 11)\n\n\n\n\n\n","category":"method"},{"location":"index.html#RemoteS.grid_at_sensor","page":"Index","title":"RemoteS.grid_at_sensor","text":"G = grid_at_sensor(fname::String, sds_name::String=\"\"; V::Bool=false, kw...)\n\nRead one of those netCDF files that are not regular grids but have instead the coordinates in the LONGITUDE abd LATITUDE arrays. MODIS L2 files are a good example of this. Data in theses files are not layed down on a regular grid and we must interpolate to get one. Normally the lon and lat arrays are called 'longitude' and 'latitude' and these it's what is seek for by default. But files exist that pretend to comply to CF but use other names. In this case, use the kwargs 'xarray' & 'yarray' to pass in the variable names. For example: xarray=\"XLONG\", yarray=\"XLAT\" The other fundamental info to pass in is the name of the array to be read/interpolated. We do that via the SDS_NAME arg.\n\nIn simpler cases the variable to be interpolated lays down on a 2D array but it is also possible that it is stored in a 3D array. If that is the case, use the keyword 'band' to select a band (ex: 'band=2') Bands are numbered from 1.\n\nThe interpolation is done so far with 'nearneighbor'. Both the region (-R) and increment (-I) are estimated from data but they can be set with 'region' and 'inc' kwargs as well. For MODIS data we can select the quality flag to filter by data quality. By default the best quality (=0) is used, but one can select another with the quality=val kwarg. Positive 'val' values select data of quality <= quality, whilst negative 'val' values select only data with quality >= abs(val). This allows for example to extract only the cloud coverage.\n\nIf instead of calculating a grid (returned as a GMTgrid type) user wants the x,y,z data intself, use the keywords 'dataset', or 'outxyz' and the output will be in a GMTdataset (i.e. use 'dataset=true').\n\nTo inquire just the list of available arrays use 'list=true' or 'gdalinfo=true' to get the full file info.\n\nExamples:\n\nG = grid_at_sensor(\"AQUA_MODIS.20020717T135006.L2.SST.nc\", \"sst\", V=true);\n\nG = grid_at_sensor(\"TXx-narr-annual-timavg.nc\", \"T2MAX\", xarray=\"XLONG\", yarray=\"XLAT\", V=true);\n\n\n\n\n\n","category":"function"},{"location":"index.html#RemoteS.ndvi-Tuple{String, String}","page":"Index","title":"RemoteS.ndvi","text":"NDVI = ndvi(bndR, bndNIR; threshold=0.4, mask::Bool=false)\n\nCompute the NDVI vegetation index. Input can be either the bands file names, or GMTimage objects with the band's data.\n\nReturns either a Float32 GMTgrid or a UInt8 GMTimage if the mask option is set to true.\n\n\n\n\n\n","category":"method"},{"location":"index.html#RemoteS.radiance_TOA-Tuple{String}","page":"Index","title":"RemoteS.radiance_TOA","text":"R = radiance_TOA(fname::String)\n\nReturns a GMTgrid with the radiance at TopOfAtmosphere for the Landsat8 band file fname\n\n\n\n\n\n","category":"method"},{"location":"index.html#RemoteS.read_mtl","page":"Index","title":"RemoteS.read_mtl","text":"readmtl(bandname::String, mtl::String=\"\")\n\nUse the band_name of a Landsat8 band to find the MTL file with the parameters of the scene at which band belongs and read the params needed to compute Brightness temperature, radiance at top of atmosphere, etc. If the MTL file does not lieves next to the band file, send its name via the mtl argument.\n\nReturns a tuple with:\n\n(band=band, radmul=radmul, radadd=radadd, radmax=radmax, reflectmul=reflectmul, reflectadd=reflectadd, reflectmax=reflectmax, sunazim=sunazim, sunelev=sunelev, sundis=sunazim, K1=K1, K2=K2)\n\n\n\n\n\n","category":"function"},{"location":"index.html#RemoteS.reflectance_TOA-Tuple{String}","page":"Index","title":"RemoteS.reflectance_TOA","text":"R = reflectance_TOA(fname::String)\n\nReturns a GMTgrid with the TopOfAtmosphere planetary reflectance for the Landsat8 band file fname\n\n\n\n\n\n","category":"method"},{"location":"index.html#RemoteS.reflectance_surf-Tuple{String}","page":"Index","title":"RemoteS.reflectance_surf","text":"R = reflectance_surf(fname::String)\n\nCompute the radiance-at-surface of Landsat8 band using the COST model.\n\nReturns a Float32 GMTgrid type\n\n\n\n\n\n","category":"method"},{"location":"index.html#RemoteS.spectral_indices","page":"Index","title":"RemoteS.spectral_indices","text":"\n\n\n\n","category":"function"},{"location":"index.html#RemoteS.spectral_indices-Tuple{String, String}","page":"Index","title":"RemoteS.spectral_indices","text":"\n\n\n\n","category":"method"},{"location":"index.html#RemoteS.truecolor-Tuple{Any, Any, Any}","page":"Index","title":"RemoteS.truecolor","text":"Irgb = truecolor(bndR, bndG, bndB)\n\nTake three Landsat8/Sentinel2 UINT16 GMTimages or the file names of those bands and compose an RGB true color image applying automatic histogram stretching.\n\nReturn an UInt8 RGB GMTimage\n\n\n\n\n\n","category":"method"}]
}
